Critical Section:

Critical section refers to the parts of the program where the shared resource is accessed, i.e. 
If same resources is needed to complete different threads that is known as "critical section".


Race condition:

Concurrent accesses to shared resource can lead to race condition.
A race condition occurs when two or more threads can access shared data and they try to change it 
at the same time. As a result, the values of variables may be unpredictable and vary depending on 
the timings of context switches of the processes.


To get of rid this condition we use lock mechanism:

"threading module provides a Lock class to deal with the race conditions". 
Lock is implemented using a "Semaphore" object provided by the Operating System.

Semaphore:A semaphore is a synchronization object that controls access by multiple processes/threads to a 
common resource in a parallel programming environment. It is simply a value in a designated place in 
operating system (or kernel) storage that each process/thread can check and then change. 
Depending on the value that is found, the process/thread can use the resource or will find that it is 
already in use and must wait for some period before trying again. 
Semaphores can be binary (0 or 1) or can have additional values. 
Typically, a process/thread using semaphores checks the value and then, if it using the resource, 
changes the value to reflect this so that subsequent semaphore users will know to wait.


Lock has basically two functions:
    1.Lock.acquire() - To acquire a lock
    2.Lock.release() - To release a lock ----refer thread_ex2.py 

Parallelism:

Through multithreading we achieve concurrency , but it represents the illusion of Parallelism.
( We can best understand this with the figure I have attached)
to achieve Parallelism we use multiprocessing.







